import{S as B,i as P,am as p,s as S,D as l,c as F,p as m,a as R}from"./pool.a567b30c.js";import{_ as v}from"./index.4cb2b268.js";import{a0 as W,m as V,N as U,a1 as j}from"./entry.ea57915f.js";function h(s){const o={fullRpcUrl:localStorage.getItem(`${s}-currentRpc`)||v[s||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${s}-currentRpc`)||v[s||"Sui"].faucetURL,simulationAccount:v[s||"Sui"].simulationAccount,xcetus:v[s||"Sui"].xcetus};console.log("defaultNetworkOptions####",o);const e=W(new B(o)),r=P(),c=V(()=>r);U(()=>{c.value.address&&(e.senderAddress=c.value.address)}),console.log(e.senderAddress,"===>sdk.senderAddress");const u=async t=>{const n=await e.XCetusModule.getOwnerLockCetuss(t);return console.log(n,"===>lockWhales"),n},C=async(t,n)=>{const a=p.getAvailableXCetus(t,n);return console.log(a,"==>availableXwhale"),a},f=async t=>{const n=await e.XCetusModule.getOwnerCetusCoins(t);return console.log(n,"===>coins"),n},w=async t=>await e.XCetusModule.getOwnerVeNFT(t),y=async(t,n)=>{const a={amount:t};n&&(a.venft_id=n);const i=await e.XCetusModule.convertPayload(a);return g(i)},d=async()=>{const t=await e.XCetusModule.mintVeNFTPayload();return g(t)},x=async(t,n)=>{const a=await e.XCetusModule.redeemNum(t,n);return console.log(a,"result===>"),{amountOut:a.amountOut,percent:S(new l(a.percent).mul(new l(100)).toString(),2)}},X=async(t,n)=>{const a=await e.XCetusModule.reverseRedeemNum(t,n);return{amountOut:a.amountOut,percent:S(new l(a.percent).mul(new l(100)).toString(),2)}},M=async(t,n,a)=>{const i=await e.XCetusModule.redeemLockPayload({venft_id:n,amount:t,lock_day:a});return console.log(i,"tx===>"),g(i)},b=t=>p.getLockingCetuss(t),k=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&p.isLocked(a)){const i=e.XCetusModule.cancelRedeemPayload({venft_id:n,lock_id:t});return g(i)}},T=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&!p.isLocked(a)){const i=await e.XCetusModule.redeemPayload({venft_id:n,lock_id:t});return g(i)}},_=t=>{const n=Date.parse(new Date().toString())/1e3,a=new l(n).sub(t.start_time).div(new l(t.interval_day).mul(60)).toFixed(0,l.ROUND_UP),i=new l(t.start_time).add(new l(a).mul(60*t.interval_day));return console.log(i,"===>nextStartTime"),i.toString()},L=async()=>{const t=await e.XCetusModule.getDividendManager();console.log("dividendManager:",t);const n=_(t);return console.log(n,"===>nextStartTime"),{nextStartTime:n,...t}},N=async(t,n)=>{const a=await e.XCetusModule.getVeNFTDividendInfo(n.venft_dividends.id,t);return{rewards:a&&a.rewards||[]}},D=async t=>{const n=await e.XCetusModule.getDividendManager();if(console.log("dividendManager: ",n),n.bonus_types.length>0){const a=await e.XCetusModule.redeemDividendPayload(t,n.bonus_types);return g(a)}},A=async t=>{const n=await e.XCetusModule.getDividendManager();if(console.log("dividendManager: ",n),n.bonus_types.length>0){const a=await e.XCetusModule.redeemDividendV2Payload(t,n.bonus_types);return g(a)}},I=async t=>{const n=await e.XCetusModule.getOwnerVeNFT(t);if(console.log("nfts: ",n),n){const a=await e.XCetusModule.getXcetusManager();console.log("xcetusManager: ",a);const i=new l(n.xcetus_balance).div(a.treasury).mul(100).toString();return console.log("rate: ",i),Number(i)>0&&Number(i)<.01?"<0.01":S(i,2)}else return 0},g=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getOwnerLockCetuss:u,getOwnerCetusCoins:f,getOwnerVeNFT:w,depositCetus:y,getMintVeNFTPayload:d,redeemNum:x,getRedeemLockPayload:M,getAvailableXCetus:C,getLockingCetuss:b,getCancelRedeemPayload:k,getVeNFTDividendInfo:N,reverseRedeemNum:X,getRedeemPayload:T,getRedeemDividendPayload:D,getMyShare:I,getDividendManager:L,getPeriod:t=>{const n=Date.now()/1e3,{start_time:a,interval_day:i}=t,O=Math.ceil((n-a)/(i*60));return console.log(n,"===>currentTime"),console.log(a,"===>start_time"),console.log(n-a,"===>currentTime-start_time"),console.log((n-a)/(i*60),"(currentTime - start_time) / (interval_day * 60)"),O},getRedeemDividendV2Payload:A}}const z=j("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(s){const o=h("Sui");try{const e=await o.getOwnerVeNFT(s);console.log(e,"===>result"),e&&!F(e)?(this.venft_id=e.id,this.xWhaleBalance=m(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},console.log("执行37"),this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0"}},async getVeNFTDividendInfo(){const s=h("Sui"),o=R("Sui");try{const e=await s.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),r=await s.getPeriod(this.dividendManagerInfo);console.log(r,"===>period");let c=0;if(console.log(e,"===>result"),e&&e.rewards){for(let u=0;u<e.rewards.length;u++)if(e.rewards[u].period<r){const C=e.rewards[u].rewards;for(let f=0;f<C.length;f++){const w=C[f],y=await o.getTokenList();console.log(y,"tokenList===>");let d=y.filter(x=>x.address==w.coin_type)[0];d||(d=(await o.getTokenListByCoinType([w.coin_type]))[0]),console.log(d,"==>tokenInfo"),this.pendingCoinInfo=d,console.log(m(w.amount,d.decimals),"==>prettyAmount(ele.amount, tokenInfo[0].decimals)"),c+=Number(m(w.amount,d.decimals))}}console.log(c,"amount===>"),this.pendingAmount=S(c,6),console.log(this.nextStartTime,"===>nextStartTime")}else this.pendingAmount="0"}catch{this.pendingAmount="0"}},async getDividendManager(){const o=await h("Sui").getDividendManager();this.nextStartTime=o.nextStartTime,this.dividendManagerInfo=o,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(s){const e=await h("Sui").getOwnerCetusCoins(s);if(console.log(e,"==>assets"),e&&e.length>0){let r=new l(0);e.forEach(c=>{console.log(m(c.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),r=r.add(m(c.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=r}else this.whaleBalance="0"},async getOwnerLockCetuss(s){const e=await h("Sui").getOwnerLockCetuss(s);console.log(e,"assets===>");const r=e.sort((c,u)=>c.locked_until_time-u.locked_until_time);this.ownerLocks=r,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const o=await h("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(o,"==>result1111"),this.availableXwhale=m(o,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new l(this.xWhaleBalance).sub(new l(this.availableXwhale)).toString():"--"},async getMyShare(s){const e=await h("Sui").getMyShare(s);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")},async getXcetusApr(){const{data:s}=await fetch(`${v.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),o=s.apr&&s.apr.replace("%","");this.cetusApr=Number(o)>0&&Number(o)<.01?"<0.01":o,console.log(s,"data===>")},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(s){this.claimLoading=s}}});export{h as a,z as u};
