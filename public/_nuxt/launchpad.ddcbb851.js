import{C as w,I as C,a as K}from"./index.77e76edc.js";import{v as S,u as B,ab as W,ac as M}from"./pool.8ac244d9.js";import{c as u,a as J,u as E}from"./sha256.3f9dd0c2.js";import{a1 as N,m,O as j,a2 as q}from"./entry.a00a8559.js";function p(e){const c={launchpad:u[e||"Sui"].launchpad,ido:u[e||"Sui"].ido,xcetus:u[e||"Sui"].xcetus,booster:u[e||"Sui"].booster,maker_bonus:u[e||"Sui"].maker_bonus},n={fullRpcUrl:localStorage.getItem(`${e}-currentRpc`)||u[e||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${e}-currentRpc`)||u[e||"Sui"].faucetURL,faucet:u[e||"Sui"].faucet,simulationAccount:u[e||"Sui"].simulationAccount,cetus_config:u[e||"Sui"].cetus_config,clmm:u[e||"Sui"].clmm},a=new S(n),l=N(new w(c,a)),i=new K(l),I=J(),_=m(()=>I);j(()=>{_.value.address&&(l.ClmmSDK.senderAddress=_.value.address)});const A=()=>{const t=new S(n);return new w(c,t)},h=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}}),k=E();m(()=>k);const T=B();m(()=>T);const b=async t=>{t.setSenderIfNotSet(_.value.address);const o=await t.build({provider:l.ClmmSDK.fullClient});return await l.ClmmSDK.fullClient.dryRunTransactionBlock({transactionBlock:o})},x=async()=>await i.getPools(),D=async t=>await i.getPool(t),R=async(t,o)=>{const s=o||await i.getPools();return await i.getJoinPools(t,s)},v=async(t,o)=>(o||await i.getPools()).filter(r=>r.owner===M(t)),O=async t=>{const o=A();o.ClmmSDK.senderAddress=_.value.address;const s=await i.creatPurchasePayload(t.pool,t.amount);return h(s)},U=async t=>{const o=await i.creatRedeemPayload(t.pool);return h(o)},y=async t=>{if(console.log("pool: ",t),t.pool_status!=="Settle")throw new Error("The pool is not in settle ");let o=null,s=!1;const r=await l.ClmmSDK.Pool.getPoolImmutables();for(const d of r){if(d.coinTypeA===t.coin_type_sale&&d.coinTypeB===t.coin_type_raise&&Number(d.tickSpacing)===t.tick_spacing){o=await l.ClmmSDK.Pool.getPool(d.poolAddress),console.log("clmmPool: ",o);break}if(d.coinTypeA===t.coin_type_raise&&d.coinTypeB===t.coin_type_sale&&Number(d.tickSpacing)===t.tick_spacing){o=await l.ClmmSDK.Pool.getPool(d.poolAddress),s=!0,console.log("clmmPool: ",o);break}}const P=await l.ClmmSDK.CetusConfig.getTokenListByCoinTypes([t.coin_type_raise,t.coin_type_sale]),f=P[t.coin_type_sale].decimals,L=P[t.coin_type_raise].decimals;let g;if(t.liquidity_injection_ratio>0&&o===null)throw new Error("not found clmmPool ");if(o&&t.liquidity_injection_ratio>0){console.log(JSON.stringify({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise,clmm_args:{current_price:t.current_price,clmm_pool_address:o.poolAddress,clmm_sqrt_price:o.current_sqrt_price.toString(),opposite:s,sale_decimals:f,raise_decimals:L}}),"txtxtxtxtxt2222");try{g=await l.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise,clmm_args:{current_price:t.current_price,clmm_pool_address:o.poolAddress,clmm_sqrt_price:o.current_sqrt_price.toString(),opposite:s,sale_decimals:f,raise_decimals:L}})}catch(d){console.log(d,"e===>")}}else g=await l.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise});return console.log(g,"txtxtx25211"),g};return{is_can_withdraw:async t=>C.is_can_withdraw(t),calculateRedeemAmount:async(t,o)=>C.calculateRedeemAmount(t,o),getPoolConfigs:async()=>{const t=await l.ClmmSDK.CetusConfig.getLaunchpadPoolConfigs();return console.log(t,"==>poolConfigs"),t},getLockNFTList:async t=>{if(t.is_liquidity_injected){const o=await i.getLockNFTList(t);return console.log("getLockNFTList: ",o),o}},beforeSettle:y,simulate:b,TickUtil:W,getCmmPoolAddress:async t=>{let o=null;const s=await l.ClmmSDK.Pool.getPoolImmutables();console.log(s,"===>clmmImmutables");for(const r of s){if(r.coinTypeA===t.coin_type_sale&&r.coinTypeB===t.coin_type_raise&&Number(r.tickSpacing)==Number(t.tick_spacing)){o=await l.ClmmSDK.Pool.getPool(r.poolAddress),console.log("clmmPool: ",o);break}if(r.coinTypeA===t.coin_type_raise&&r.coinTypeB===t.coin_type_sale&&Number(r.tickSpacing)==Number(t.tick_spacing)){o=await l.ClmmSDK.Pool.getPool(r.poolAddress),console.log("clmmPool: ",o);break}}return o||null},getLaunchpadAllPools:x,getLaunchpadPoolInfo:D,getJoinPools:R,getOwnerPools:v,getCreatPurchasePayload:O,getCreatClaimPayload:U,getCreatSettlePayload:async t=>{const o=await y(t);return console.log(o,"txtxtxtxtxtxtx111"),h(o)},getCreatWithdrawParams:async t=>{const o=await i.creatWithdrawPayload(t);return h(o)},getIsWhiteListUser:async(t,o)=>await i.isWhiteListUser(o,t),getCreatUnlockNftPayload:async(t,o)=>{if(t.pool_status=="Ended"){if(o){const s={lock_nft:o.lock_nft_id,nft_type:t.version=="1"?o.nft_type:o.type},r=await i.unlockNftPayload(t,s);return h(r)}}else throw new Error("The pool is not in Ended  ")},getPurchaseMark:async(t,o)=>{const s=await i.getPurchaseInfo(t,o);return console.log("purchaseMark",s),s},getPurchaseAmountVal:async(t,o)=>await i.getwhiteProtectionInfo(t,o),calculateWithdrawAmount:async t=>await i.calculateWithdrawAmount(t),getCoinInfo:async(t,o)=>{const s=await l.ClmmSDK.CetusConfig.getTokenListByCoinTypes([t,o]);return console.log(s,"==>tokenMap"),s}}}const lt=q("launchpad",{state:()=>({currentLaunchpadPoolInfo:{},launchpadAllPools:[],launchpadOwnerAllPools:[],launchpadJoinPools:[],haveLaunchpad:!1,launchpadPoolsLoading:!0,getOwnDateLoading:!0,ownIsWhiteList:!1,committedCoinAssetCount:"0",currentPoolNumData:{},idoPoolConfigInfo:{},purchaseMark:{},settlePayTokenAInfo:{},settlePayTokenBInfo:{},getPurchaseAmountLoading:!0,currentTab:"latest"}),actions:{async setSettlePayTokenAInfo(e){this.settlePayTokenAInfo=e},async setSettlePayTokenBInfo(e){this.settlePayTokenBInfo=e},async setGetPurchaseAmountLoading(e){this.getPurchaseAmountLoading=e},async setPurchaseMark(e){this.purchaseMark=e},async setGetOwnDateLoading(e){this.getOwnDateLoading=e},async setCurrentLaunchpadPoolInfo(e){this.currentLaunchpadPoolInfo=e},async setCurrentTab(e){this.currentTab=e},async setCurrentPoolNumData(e){this.currentPoolNumData=e},async setOwnIsWhiteList(e){this.ownIsWhiteList=e},async setMyCountCommittedCoinAsset(e){this.committedCoinAssetCount=e},async setLaunchpadPoolsLoading(e){this.launchpadPoolsLoading=e},async setLaunchpadAllPools(){this.launchpadAllPools=[],this.setLaunchpadPoolsLoading(!0);const c=await p("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=c.sort((n,a)=>a.activity_end_time-n.activity_end_time),this.setLaunchpadPoolsLoading(!1),console.log("launchpadAllPoolsListlaunchpadAllPoolsList",c)},async setLaunchpadAllPoolsNoLoading(){const c=await p("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=c.sort((n,a)=>a.activity_end_time-n.activity_end_time),console.log("launchpadAllPoolsListlaunchpadAllPoolsList11",c)},async getCurrentLaunchpadPoolInfo(e){this.setGetPurchaseAmountLoading(!0);const c=p("Sui"),n=await c.getLaunchpadPoolInfo(e)||{},a=await c.getCoinInfo(n.coin_type_raise,n.coin_type_sale);this.currentLaunchpadPoolInfo={raiseCoinInfo:{logoURI:a[n.coin_type_raise].logo_url,...a[n.coin_type_raise]},saleCoinInfo:{logoURI:a[n.coin_type_sale].logo_url,...a[n.coin_type_sale]},...n},this.setGetOwnDateLoading(!1),console.log("currentLaunchpadPoolInfo",this.currentLaunchpadPoolInfo)},async getCurrentLaunchpadPoolInfoNoLoading(e){const c=p("Sui"),n=await c.getLaunchpadPoolInfo(e)||{},a=await c.getCoinInfo(n.coin_type_raise,n.coin_type_sale);this.currentLaunchpadPoolInfo={raiseCoinInfo:{logoURI:a[n.coin_type_raise].logo_url,...a[n.coin_type_raise]},saleCoinInfo:{logoURI:a[n.coin_type_sale].logo_url,...a[n.coin_type_sale]},...n},console.log("currentLaunchpadPoolInfo11",this.currentLaunchpadPoolInfo)},async setLaunchpadJoinPools(e){this.setLaunchpadPoolsLoading(!0);const n=await p("Sui").getJoinPools(e)||[];n.length<1?this.setLaunchpadPoolsLoading(!1):(this.launchpadJoinPools=n.sort((a,l)=>l.activity_end_time-a.activity_end_time),this.setLaunchpadPoolsLoading(!1),console.log("launchpadJoinPoolsListresultresultresult111",n))},async setLaunchpadOwnerAllPools(e,c){const a=await p("Sui").getOwnerPools(e,c)||[];a.length<1?this.haveLaunchpad=!1:(this.launchpadOwnerAllPools=a.sort((l,i)=>i.activity_end_time-l.activity_end_time),this.haveLaunchpad=!0),console.log("resultresultresult111",a)},async getIdoPoolConfigInfo(){const c=await p("Sui").getPoolConfigs(),n={};c.map((a,l)=>{n[a.pool_address]=a}),console.log(c,n,"resres"),this.idoPoolConfigInfo=n||{}}}});export{p as a,lt as u};
