import{c as m,p as c,a as f,s as p,D as d}from"./pool.3b6c39ad.js";import{u as i}from"./useWhale.cc0470fa.js";import{a1 as v}from"./entry.0541b11c.js";import{c as S}from"./sha256.0934ce98.js";const k=v("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(t){const a=i("Sui");try{const e=await a.getOwnerVeNFT(t);console.log(e,"===>result"),e&&!m(e)?(this.venft_id=e.id,this.xWhaleBalance=c(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},console.log("执行37"),this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0"}},async getVeNFTDividendInfo(){const t=i("Sui"),a=f("Sui");try{const e=await t.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),n=await t.getPeriod(this.dividendManagerInfo);console.log(n,"===>period");let s=0;if(console.log(e,"===>result"),e&&e.rewards){for(let o=0;o<e.rewards.length;o++)if(e.rewards[o].period<n){const g=e.rewards[o].rewards;for(let h=0;h<g.length;h++){const r=g[h],u=await a.getTokenList();console.log(u,"tokenList===>");let l=u.filter(w=>w.address==r.coin_type)[0];l||(l=(await a.getTokenListByCoinType([r.coin_type]))[0]),console.log(l,"==>tokenInfo"),this.pendingCoinInfo=l,console.log(c(r.amount,l.decimals),"==>prettyAmount(ele.amount, tokenInfo[0].decimals)"),s+=Number(c(r.amount,l.decimals))}}console.log(s,"amount===>"),this.pendingAmount=p(s,6),console.log(this.nextStartTime,"===>nextStartTime")}else this.pendingAmount="0"}catch{this.pendingAmount="0"}},async getDividendManager(){const a=await i("Sui").getDividendManager();this.nextStartTime=a.nextStartTime,this.dividendManagerInfo=a,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(t){const e=await i("Sui").getOwnerCetusCoins(t);if(console.log(e,"==>assets"),e&&e.length>0){let n=new d(0);e.forEach(s=>{console.log(c(s.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),n=n.add(c(s.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=n}else this.whaleBalance="0"},async getOwnerLockCetuss(t){const e=await i("Sui").getOwnerLockCetuss(t);console.log(e,"assets===>");const n=e.sort((s,o)=>s.locked_until_time-o.locked_until_time);this.ownerLocks=n,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const a=await i("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(a,"==>result1111"),this.availableXwhale=c(a,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new d(this.xWhaleBalance).sub(new d(this.availableXwhale)).toString():"--"},async getMyShare(t){const e=await i("Sui").getMyShare(t);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")},async getXcetusApr(){const{data:t}=await fetch(`${S.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),a=t.apr&&t.apr.replace("%","");this.cetusApr=Number(a)>0&&Number(a)<.01?"<0.01":a,console.log(t,"data===>")},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(t){this.claimLoading=t}}});export{k as u};
