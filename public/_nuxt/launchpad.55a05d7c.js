import{_ as i,S as _,r as L,U as P,V as g,W as C}from"./import-icon.15923bff.js";import{eZ as m,e$ as f}from"./entry.83db2c24.js";function d(){const o=i.Aptos.liquidswapDeployer,s={rpcUrl:i.Aptos.rpcUrl,networkOptions:{nativeToken:"0x1::aptos_coin::AptosCoin",launchpad:{cetusLaunchpad:i.Aptos.Launchpad,crowdCoin:i.Aptos.LaunchpadCrowdCoin},modules:{LiquidswapDeployer:o,ClmmIntegrate:i.Aptos.clmmIntegrate,FetcherDeployer:i.Aptos.fetcher,TokenDeployer:i.Aptos.TokenDeployer,IntegerMate:i.Aptos.IntegerMate}}},t=m(new _(s));return{getLaunchpadAllPools:async()=>await t.Launchpad.getLaunchpadPools(["0x423108b72fb4426fb6791e67c4d8003d027f2a4b13b1108f52f4d540b564673b","0x8f6b1b00b9b0591a81a6afb10bd71350931da714597238ed4a41d63edb134acd"]),getLaunchpadPoolInfo:async a=>await t.Launchpad.getLaunchpadPool(a),getJoinPools:async a=>{const n=await t.Launchpad.getOwenrLaunchpadCoins(a),e=[],p=await t.Launchpad.getLaunchpadPools([]);return n.forEach(h=>{for(const r of p)if(h.coin_type_sale===r.coin_type_sale&&h.coin_type_raise===r.coin_type_raise){e.push(r);break}}),e},getPurchaseTransactionPayload:(a,n)=>t.Launchpad.purchaseTransactionPayload({coin_type_sale:a.coin_type_sale,coin_type_raise:a.coin_type_raise,pool_addr:a.pool_address,raise_amount_in:n}),getRevokeTransactionPayload:(a,n)=>t.Launchpad.revokeTransactionPayload({coin_type_sale:a.coin_type_sale,coin_type_raise:a.coin_type_raise,pool_addr:a.pool_address,cs_coin_amount:n}),getClaimTransactionPayload:(a,n)=>t.Launchpad.claimTransactionPayload({coin_type_sale:a.coin_type_sale,coin_type_raise:a.coin_type_raise,pool_addr:a.pool_address,cs_coin_amount:n}),getRedeemPositionTransactionPayload:a=>t.Launchpad.redeemPositionTransactionPayload({coin_type_sale:a.coin_type_sale,coin_type_raise:a.coin_type_raise,pool_addr:a.pool_address}),getUserInWhitelist:async(a,n)=>{const e=await t.Launchpad.hasPoolWhitelist(a);return e.exist?await t.Launchpad.inPoolWhitelist(n,e):(console.log("this pool not whitelist"),!1)},getMyCommittedCoinAsset:async(a,n)=>await t.Resources.getCoinStore(n,t.Launchpad.buildLaunchpadCoinType(a.coin_type_sale,a.coin_type_raise))}}const k=f("launchpad",{state:()=>({currentLaunchpadPoolInfo:{},launchpadAllPools:[],launchpadOwnerAllPools:[],launchpadPoolsLoading:!0,getOwnDateLoading:!0,ownIsWhiteList:!1,committedCoinAssetSdk:"0",committedCoinAssetCount:"0",myPurchaseSdk:"",myPurchaseCount:"",currentPoolNumData:{},idoCountTotalPoolData:{},idoCountCurrentPoolData:{},idoCountOwnData:{},idoPoolConfigInfo:{},currentTab:"latest"}),actions:{async setGetOwnDateLoading(o){this.getOwnDateLoading=o},async setCurrentLaunchpadPoolInfo(o){this.currentLaunchpadPoolInfo=o},async setCurrentTab(o){this.currentTab=o},async setCurrentPoolNumData(o){this.currentPoolNumData=o},async setOwnIsWhiteList(o){this.ownIsWhiteList=o},async setMyCommittedCoinAsset(o){this.committedCoinAssetSdk=o},async setMyCountCommittedCoinAsset(o){this.committedCoinAssetCount=o},async setLaunchpadPoolsLoading(o){this.launchpadPoolsLoading=o},async setLaunchpadAllPools(){console.log("newValnewVal11"),this.launchpadAllPools=[],this.setLaunchpadPoolsLoading(!0),d();const o=P;console.log(o,"launchpadAllPoolsListlaunchpadAllPoolsList"),o.length<1?this.setLaunchpadPoolsLoading(!1):(this.setLaunchpadPoolsLoading(!1),this.launchpadAllPools=o.sort((s,t)=>t.start_activity_time-s.start_activity_time),console.log(o,"resultresultresult"))},async getCurrentLaunchpadPoolInfo(o,s){d();const c=await L().getPool(s),u=P.filter((l,y)=>(console.log(l,"itemitem"),l.pool_address==o));this.setLaunchpadPoolsLoading(!1),this.currentLaunchpadPoolInfo={...u[0],cmmPoolInfo:c},console.log(this.currentLaunchpadPoolInfo,"currentLaunchpadPoolInfo")},async setLaunchpadOwnerAllPools(o){this.setLaunchpadPoolsLoading(!0),d();const s=g;s.length<1?this.setLaunchpadPoolsLoading(!1):(this.setLaunchpadPoolsLoading(!1),this.launchpadOwnerAllPools=s.sort((t,c)=>c.start_activity_time-t.start_activity_time),console.log(s,"resultresultresult111"))},async setIdoPoolTotalData(){await $fetch(`${i.Sui.api}/v2/sui/ido/total/count`)},async setCurrentIdoPoolData(o){const s={data:{}};this.idoCountCurrentPoolData=s.data||{}},async getIdoOwnPoolTotalData(o,s){const t={data:{}};return this.idoCountOwnData=t.data||{},t.data},async setIdoOwnCountPoolData(o){this.idoCountOwnData=o},async getIdoPoolConfigInfo(){const o=C;return console.log(o,o.data,"resres"),this.idoPoolConfigInfo=o.data||{},o.data}}});export{d as a,k as u};
