import{p as d,e as m,as as f,s as p}from"./pool.bb70887e.js";import{u as r}from"./useWhale.40c71e88.js";import{a7 as v}from"./entry.2356a469.js";import{c as x}from"./sha256.0b273565.js";import{D as u}from"./decimal.0bdeb344.js";const A=v("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{},rewardCoin:{},rewardCoinAmount:"--",xcetusRewardList:[]}),actions:{async getOwnerVeNFT(t){const a=r("Sui");try{const e=await a.getOwnerVeNFT(t);console.log(e,"===>result"),e?(this.venft_id=e.id,this.xWhaleBalance=d(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},console.log("执行37"),this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="--",this.availableXwhale="--",this.redeemingXwhale="--",this.pendingAmount="--",this.newPendingAmount="--"}},async getVeNFTDividendInfo(){const t=r("Sui"),a=m("Sui");try{const e=await t.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),o=await t.getPeriod(this.dividendManagerInfo),c=await a.getTokenList();console.log(o,"===>period"),console.log(e,"===>result");const l=[];if(e&&e.rewards&&e.rewards.length>0){for(let i=0;i<e.rewards.length;i++)if(e.rewards[i].period<o){const h=e.rewards[i].rewards;for(let n=0;n<h.length;n++){const s=h[n];Number(s.amount)>0&&l.push({...s})}}if(l&&l.length>0){const i={};for(let n=0;n<l.length;n++){const s=l[n];if(i[s.coin_type])i[s.coin_type].amount=new u(i[s.coin_type].amount).add(new u(s.amount)).toString();else{let w=c.filter(g=>f(g.address,s.coin_type))[0];w||(w=(await a.getTokenListByCoinType([s.coin_type]))[0]),i[s.coin_type]={...s,...w}}}const h=Object.values(i).map(n=>({...n,amount:p(d(n.amount,n.decimals),6)}));this.xcetusRewardList=h,console.log(h,"===>rewardArr")}else this.xcetusRewardList=[]}else this.xcetusRewardList=[]}catch{this.xcetusRewardList=[]}},async getDividendManager(){const a=await r("Sui").getDividendManager();this.nextStartTime=a.nextStartTime,this.dividendManagerInfo=a,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(t){const e=await r("Sui").getOwnerCetusCoins(t);if(console.log(e,"==>assets"),e&&e.length>0){let o=new u(0);e.forEach(c=>{console.log(d(c.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),o=o.add(d(c.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=o}else this.whaleBalance="0"},async getOwnerLockCetuss(t){const e=await r("Sui").getOwnerLockCetuss(t);console.log(e,"assets===>");const o=e.sort((c,l)=>c.locked_until_time-l.locked_until_time);this.ownerLocks=o,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const t=r("Sui");console.log(this.ownerLocks,"==>this.ownerLocks");const a=await t.getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(a,"==>result1111"),this.availableXwhale=d(a,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new u(this.xWhaleBalance).sub(new u(this.availableXwhale)).toString():"--"},async getMyShare(t){const a=r("Sui");try{const e=await a.getMyShare(t);e?(this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")):this.xcetusShare="0"}catch(e){console.log(e,"e===>"),this.xcetusShare=""}},async getXcetusApr(){const{data:t}=await fetch(`${x.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),a=t.apr&&t.apr.replace("%","");this.cetusApr=Number(a)>0&&Number(a)<.01?"<0.01":a,console.log(t,"data===>")},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--",this.xcetusRewardList=[]},setClaimLoading(t){this.claimLoading=t}}});export{A as u};
