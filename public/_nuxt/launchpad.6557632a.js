import{S as m,i as U,u as R,aj as M,ak as O,al as L}from"./pool.7985c69b.js";import{_ as d,u as B}from"./index.99d006b3.js";import{a0 as E,m as P,N as w,a1 as W}from"./entry.2d393e12.js";function _(a){const c={fullRpcUrl:localStorage.getItem(`${a}-currentRpc`)||d[a||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${a}-currentRpc`)||d[a||"Sui"].faucetURL,faucet_router:d[a||"Sui"].faucet_router,simulationAccount:d[a||"Sui"].simulationAccount,token:d[a||"Sui"].token,clmm:d[a||"Sui"].clmm,launchpad:d[a||"Sui"].launchpad,xwhale:d[a||"Sui"].xwhale};console.log("defaultNetworkOptions####",c);const o=E(new m(c)),s=U(),i=P(()=>s);w(()=>{i.value.address&&(o.senderAddress=i.value.address,o.gasConfig=c.gasConfig,console.log(o.senderAddress,"sdk.senderAddress"))});const p=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}}),C=B();P(()=>C);const k=R();P(()=>k),w(()=>{i.value.address&&(o.senderAddress=i.value.address)});const A=async t=>{t.setSenderIfNotSet(i.value.address);const e=await t.build({provider:o._fullClient});return await o.fullClient.dryRunTransactionBlock({transactionBlock:e})},I=async()=>await o.Launchpad.getPools([]),S=async t=>await o.Launchpad.getPool(t),T=async(t,e)=>{const n=await o.Launchpad.getOwnerLaunchpadCoins(e,o.Launchpad.buildLaunchpadCoinType(t.coin_type_sale,t.coin_type_raise));return O.calculateTotalBalance(n).toString()},x=async(t,e)=>{const n=e||await o.Launchpad.getPools(),l=[],u=await o.Launchpad.getPurchaseMarks(t);return console.log("purchaseMarks ",u),n.forEach(h=>{for(const g of u)if(g.pool_id===h.pool_address){l.push(h);break}}),l},b=async(t,e)=>{const n=e||await o.Launchpad.getPools(),l=[];return n.forEach(u=>{u.recipient===t&&l.push(u)}),l},v=async t=>{const e=new m(c);e.senderAddress=i.value.address,e.gasConfig=c.gasConfig;const n=await e.Launchpad.creatPurchasePayload({pool_address:t.pool.pool_address,purchase_amount:t.amount,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise});return p(n)},N=async t=>{const e=await o.Launchpad.creatClaimPayload({pool_address:t.pool.pool_address,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise});return p(e)},f=async t=>{if(console.log("pool: ",t),t.pool_status!=="Settle")throw new Error("The pool is not in settle ");let e=null,n=!1;const l=await o.Pool.getPoolImmutables();for(const r of l){if(r.coinTypeA===t.coin_type_sale&&r.coinTypeB===t.coin_type_raise&&Number(r.tickSpacing)===t.tick_spacing){e=await o.Pool.getPool(r.poolAddress),console.log("clmmPool: ",e);break}if(r.coinTypeA===t.coin_type_raise&&r.coinTypeB===t.coin_type_sale&&Number(r.tickSpacing)===t.tick_spacing){e=await o.Pool.getPool(r.poolAddress),n=!0,console.log("clmmPool: ",e);break}}const u=await o.Token.getTokenListByCoinTypes([t.coin_type_raise,t.coin_type_sale]),h=u[t.coin_type_sale].decimals,g=u[t.coin_type_raise].decimals;let y;if(t.liquidity_rate>0&&e===null)throw new Error("not found clmmPool ");if(e&&t.liquidity_rate>0){console.log(JSON.stringify({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise,clmm_args:{current_price:t.current_price,clmm_pool_address:e.poolAddress,clmm_sqrt_price:e.current_sqrt_price.toString(),opposite:n,sale_decimals:h,raise_decimals:g}}),"txtxtxtxtxt2222");try{y=await o.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise,clmm_args:{current_price:t.current_price,clmm_pool_address:e.poolAddress,clmm_sqrt_price:e.current_sqrt_price.toString(),opposite:n,sale_decimals:h,raise_decimals:g}})}catch(r){console.log(r,"e===>")}}else y=await o.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise});return console.log(y,"txtxtx25211"),y};return{getPoolConfigs:async()=>{const t=await o.Launchpad.getPoolConfigs(!0);return console.log(t,"==>poolConfigs"),t},getLockNFTList:async t=>{if(t.pool_status=="Ended"){const e=await o.Launchpad.getLockNFTList(t.pool_type,t.recipient);return console.log("getLockNFTList: ",e),e}},beforeSettle:f,simulate:A,TickUtil:M,getCmmPoolAddress:async t=>{let e=null;const n=await o.Pool.getPoolImmutables();console.log(n,"===>clmmImmutables");for(const l of n){if(l.coinTypeA===t.coin_type_sale&&l.coinTypeB===t.coin_type_raise&&Number(l.tickSpacing)==Number(t.tick_spacing)){e=await o.Pool.getPool(l.poolAddress),console.log("clmmPool: ",e);break}if(l.coinTypeA===t.coin_type_raise&&l.coinTypeB===t.coin_type_sale&&Number(l.tickSpacing)==Number(t.tick_spacing)){e=await o.Pool.getPool(l.poolAddress),console.log("clmmPool: ",e);break}}return e||null},getMyCommittedCoinAsset:T,getLaunchpadAllPools:I,getLaunchpadPoolInfo:S,getJoinPools:x,getOwnerPools:b,getCreatPurchasePayload:v,getCreatClaimPayload:N,getCreatSettlePayload:async t=>{const e=await f(t);return console.log(e,"txtxtxtxtxtxtx111"),p(e)},getCreatWithdrawParams:async t=>{const e=o.Launchpad.creatWithdrawPayload({pool_address:t.pool.pool_address,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise,sale_amount:t.sale_amount,raise_amount:t.raise_amount});return p(e)},getIsWhiteListUser:async(t,e)=>{var l;return await o.Launchpad.isWhiteListUser((l=t.white_summary)==null?void 0:l.white_handle,e)},getCreatUnlockNftPayload:async(t,e)=>{if(t.pool_status=="Ended"){if(e){const n=o.Launchpad.creatUnlockNftPayload({lock_nft:e.lock_nft_id,nft_type:e.nft_type});return p(n)}}else throw new Error("The pool is not in Ended  ")},getLockNFT:async t=>{if(t.pool_status=="Ended"){const e=await o.Launchpad.getLockNFTEvent(t.pool_type,t.tick_spacing,t.recipient);if(console.log("lockNftEvent: ",e),e){const n=await o.Launchpad.getLockNFT(e.lock_nft_id);return console.log("lockNft: ",n),{lockNftEvent:e,lockNftInfo:n}}}return null},getIsAdminCap:async t=>await o.Launchpad.isAdminCap(t),getPurchaseMark:async(t,e)=>{console.log("purchaseMark,address",t,[e]);const n=await o.Launchpad.getPurchaseMarks(t,[e]);return console.log("purchaseMark",n),n},getPurchaseAmountVal:async(t,e)=>await o.Launchpad.getPurchaseAmount(e.white_summary.white_handle,t),getUnusedRaiseAmount:async t=>await L.getHistoryWithdrawRaise(o,t),getUnusedSaleAmount:async t=>await L.getHistoryWithdrawSale(o,t),getCoinInfo:async(t,e)=>{const n=await o.Token.getTokenListByCoinTypes([t,e]);return console.log(n,"==>tokenMap"),n}}}const et=W("launchpad",{state:()=>({currentLaunchpadPoolInfo:{},launchpadAllPools:[],launchpadOwnerAllPools:[],launchpadJoinPools:[],haveLaunchpad:!1,launchpadPoolsLoading:!0,getOwnDateLoading:!0,ownIsWhiteList:!1,committedCoinAssetCount:"0",currentPoolNumData:{},idoPoolConfigInfo:{},purchaseMark:{},settlePayTokenAInfo:{},settlePayTokenBInfo:{},getPurchaseAmountLoading:!0,currentTab:"latest"}),actions:{async setSettlePayTokenAInfo(a){this.settlePayTokenAInfo=a},async setSettlePayTokenBInfo(a){this.settlePayTokenBInfo=a},async setGetPurchaseAmountLoading(a){this.getPurchaseAmountLoading=a},async setPurchaseMark(a){this.purchaseMark=a},async setGetOwnDateLoading(a){this.getOwnDateLoading=a},async setCurrentLaunchpadPoolInfo(a){this.currentLaunchpadPoolInfo=a},async setCurrentTab(a){this.currentTab=a},async setCurrentPoolNumData(a){this.currentPoolNumData=a},async setOwnIsWhiteList(a){this.ownIsWhiteList=a},async setMyCountCommittedCoinAsset(a){this.committedCoinAssetCount=a},async setLaunchpadPoolsLoading(a){this.launchpadPoolsLoading=a},async setLaunchpadAllPools(){this.launchpadAllPools=[],this.setLaunchpadPoolsLoading(!0);const c=await _("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=c.sort((o,s)=>s.activity_end_time-o.activity_end_time),this.setLaunchpadPoolsLoading(!1),console.log("launchpadAllPoolsListlaunchpadAllPoolsList",c)},async setLaunchpadAllPoolsNoLoading(){const c=await _("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=c.sort((o,s)=>s.activity_end_time-o.activity_end_time),console.log("launchpadAllPoolsListlaunchpadAllPoolsList11",c)},async getCurrentLaunchpadPoolInfo(a){this.setGetPurchaseAmountLoading(!0);const c=_("Sui"),o=await c.getLaunchpadPoolInfo(a)||{},s=await c.getCoinInfo(o.coin_type_raise,o.coin_type_sale);this.currentLaunchpadPoolInfo={raiseCoinInfo:{logoURI:s[o.coin_type_raise].logo_url,...s[o.coin_type_raise]},saleCoinInfo:{logoURI:s[o.coin_type_sale].logo_url,...s[o.coin_type_sale]},...o},this.setGetOwnDateLoading(!1),console.log("currentLaunchpadPoolInfo",this.currentLaunchpadPoolInfo)},async getCurrentLaunchpadPoolInfoNoLoading(a){const c=_("Sui"),o=await c.getLaunchpadPoolInfo(a)||{},s=await c.getCoinInfo(o.coin_type_raise,o.coin_type_sale);this.currentLaunchpadPoolInfo={raiseCoinInfo:{logoURI:s[o.coin_type_raise].logo_url,...s[o.coin_type_raise]},saleCoinInfo:{logoURI:s[o.coin_type_sale].logo_url,...s[o.coin_type_sale]},...o},console.log("currentLaunchpadPoolInfo11",this.currentLaunchpadPoolInfo)},async setLaunchpadJoinPools(a){this.setLaunchpadPoolsLoading(!0);const o=await _("Sui").getJoinPools(a)||[];o.length<1?this.setLaunchpadPoolsLoading(!1):(this.launchpadJoinPools=o.sort((s,i)=>i.activity_end_time-s.activity_end_time),this.setLaunchpadPoolsLoading(!1),console.log("launchpadJoinPoolsListresultresultresult111",o))},async setLaunchpadOwnerAllPools(a,c){const s=await _("Sui").getOwnerPools(a,c)||[];s.length<1?this.haveLaunchpad=!1:(this.launchpadOwnerAllPools=s.sort((i,p)=>p.activity_end_time-i.activity_end_time),this.haveLaunchpad=!0),console.log("resultresultresult111",s)},async getIdoPoolConfigInfo(){const c=await _("Sui").getPoolConfigs(),o={};c.map((s,i)=>{o[s.pool_address]=s}),console.log(c,o,"resres"),this.idoPoolConfigInfo=o||{}}}});export{_ as a,et as u};
