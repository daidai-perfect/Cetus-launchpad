{"version":3,"file":"static/js/365.579e7b5b.chunk.js","mappings":"0LAAIA,EAAIC,OAAOC,eAEXC,EAAIA,CAACC,EAAGC,EAAGC,IADPC,EAACH,EAAGC,EAAGC,IAAMD,KAAKD,EAAIJ,EAAEI,EAAGC,EAAG,CAAEG,YAAY,EAAIC,cAAc,EAAIC,UAAU,EAAIC,MAAOL,IAAOF,EAAEC,GAAKC,EACxFC,CAAEH,EAAe,iBAALC,EAAgBA,EAAI,GAAKA,EAAGC,GAG7D,MAAMM,EACJC,YAAYR,EAAGC,EAAGQ,EAAGC,GACnBZ,EAAEa,KAAM,WACRb,EAAEa,KAAM,SACRb,EAAEa,KAAM,OACRb,EAAEa,KAAM,aACRb,EAAEa,KAAM,eACRA,KAAKC,QAAUZ,EAAGW,KAAKE,MAAQZ,EAAGU,KAAKG,IAAML,EAAGE,KAAKI,UAAYL,EACjE,MAAMM,EAAIL,KAAKI,UAAUE,WACzB,IAAKD,EACH,MAAM,IAAIE,MAAM,6CAA6CjB,eAC/DU,KAAKQ,YAAcH,CACrB,CACAI,eAAepB,GACb,MAAM,IAAIkB,MAAM,0BAClB,CACAG,sBACE,MAAM,IAAIH,MAAM,0BAClB,CACAI,gBACE,MAAM,IAAIJ,MAAM,0BAClB,CACAK,qBAAqBvB,EAAGC,GACtB,MAAOQ,EAAGC,SAAWc,EAAAA,EAAAA,aAAexB,GAAIgB,EAAIf,EAAES,GAC9C,GAAIM,EAAEJ,UAAYH,EAChB,MAAM,IAAIS,MAAM,qBAAqBF,EAAEJ,cAAcH,KACvD,OAAO,IAAIF,EAAEE,EAAGC,EAAGV,EAAGgB,EAAED,UAC1B,CACAU,qBAAsBzB,EAAGC,EAAGQ,EAAGC,GAC7B,MAAM,IAAIQ,MAAM,0BAClB,CACAO,oBAAqBzB,EAAGC,GACtB,MAAM,IAAIiB,MAAM,mBAClB,CACAO,uBAAuBzB,GACrB,MAAMC,QAAUU,KAAKG,IAAIY,MAAM1B,GAC/B,IAAKC,EACH,MAAM,IAAIiB,MAAM,kCAAoClB,GACtD,MAAO,CAACO,EAAEoB,uBAAuBhB,KAAKE,MAAOF,KAAKQ,YAAalB,GACjE,CACAwB,oBAAoBzB,GAClB,MAAMC,QAAUU,KAAKG,IAAIY,MAAM1B,GAC/B,IAAKC,EACH,MAAM,IAAIiB,MAAM,kCAAoClB,GACtD,MAAO,CAACO,EAAEqB,qBAAqBjB,KAAKE,MAAOF,KAAKQ,YAAalB,GAC/D,CACAsB,4BAA4BvB,EAAGC,EAAGQ,GAChC,MAAMC,EAAID,EAAEoB,OAAOC,QAAQC,GAAiB,SAAXA,EAAEC,MAA2C,sBAAxBD,EAAEE,WAAW,GAAGC,KAA+BH,EAAEE,WAAW,GAAG3B,QAAUL,IAC/H,GAAiB,IAAbS,EAAEyB,OACJ,MAAM,IAAIjB,MAAM,mCAClBR,EAAEyB,OAAS,GAAKC,QAAQC,MAAM,kCAAkC3B,EAAEyB,UAClE,MAAOnB,GAAKN,EAAG4B,EAAI1C,OAAO2C,YAAYvB,EAAEiB,WAAWO,KAAKT,GAAM,CAACA,EAAEG,IAAIO,MAAM,KAAK,GAAIV,EAAEzB,UACtF,OAAOoC,EAAAA,EAAAA,IAAE,aAAc,CACrBC,aAAc3C,EACd4C,eAAgB,IAAIC,EAAAA,GAAEC,EAAAA,EAAAA,OAASR,EAAES,SACjCC,SAAUC,OAAOX,EAAEU,UACnBE,YAAa,EAEbC,UAAWC,OAAOd,EAAEe,YACpBC,iBAAkB,EAClBC,MAAOH,OAAOd,EAAEiB,OAChBC,WAAY,GACZC,QAASX,EAAAA,EAAAA,OAASR,EAAEoB,UAExB,CACAnC,8BAA8BvB,EAAGC,EAAGQ,GAClC,MAAMC,EAAIH,EAAEqB,qBAAqB5B,EAAGC,EAAGQ,GACvC,MAAO,CACLI,MAAOH,EAAEiC,aACTgB,QAASjD,EAAEkC,eACXI,SAAUtC,EAAEsC,SAEhB,GAEFY,EAAAA,EAAAA,IAAEC,EAAAA,GAAG,eAAgBtD,E,qGC/EjBuD,EAAIlE,OAAOC,eAEXU,EAAIA,CAACuC,EAAG7C,EAAGD,IADP+D,EAACjB,EAAG7C,EAAGD,IAAMC,KAAK6C,EAAIgB,EAAEhB,EAAG7C,EAAG,CAAEE,YAAY,EAAIC,cAAc,EAAIC,UAAU,EAAIC,MAAON,IAAO8C,EAAE7C,GAAKD,EACxF+D,CAAEjB,EAAe,iBAAL7C,EAAgBA,EAAI,GAAKA,EAAGD,GAK7D,MAAMgE,EACJxD,YAAYP,EAAGD,EAAGU,EAAGD,GACnBF,EAAEI,KAAM,WACRJ,EAAEI,KAAM,SACRJ,EAAEI,KAAM,OACRJ,EAAEI,KAAM,aACRJ,EAAEI,KAAM,eACRJ,EAAEI,KAAM,cACRA,KAAKC,QAAUX,EAAGU,KAAKE,MAAQb,EAAGW,KAAKG,IAAMJ,EAAGC,KAAKI,UAAYN,EACjE,MAAMO,EAAIL,KAAKI,UAAUkD,YACzB,IAAKjD,EACH,MAAM,IAAIE,MAAM,6CAA6ClB,eAC/D,GAAIW,KAAKsD,YAAcjD,EAAGL,KAAKuD,WAAavD,KAAKI,UAAUmD,gBAAgC,IAApBvD,KAAKuD,YAA6C,KAApBvD,KAAKuD,WACxG,MAAM,IAAIhD,MAAM,2DACpB,CACAK,qBAAqBtB,EAAGD,GACtB,MAAOU,EAAGD,SAAWmD,EAAAA,EAAAA,aAAe3D,GAAIe,EAAIhB,EAAES,GAC9C,GAAIO,EAAEJ,UAAYF,EAChB,MAAM,IAAIQ,MAAM,qBAAqBF,EAAEJ,cAAcF,KACvD,OAAO,IAAIsD,EAAEtD,EAAGD,EAAGR,EAAGD,EAAES,GAAGM,UAC7B,CACAU,qBAAqBxB,GACnB,IACE,aAAaU,KAAKwD,iBAAiBlE,IAAI,CACzC,CAAE,MACF,CACA,OAAO,CACT,CACAwB,sBAAsBxB,GACpB,IACE,aAAaU,KAAKyD,gBAAgBnE,IAAI,CACxC,CAAE,MACF,CACA,OAAO,CACT,CACAwB,sBAAsBxB,GACpB,GAAIA,EAAEY,QAAUF,KAAKE,MACnB,MAAM,IAAIK,MAAM,+BAA+BjB,EAAEY,SACnD,IAAIW,EAAAA,EAAAA,GAAEvB,EAAEoE,SACN,MAAM,IAAInD,MAAM,0CAClB,MAAMlB,EAAIsC,EAAAA,EAAAA,OAASrC,EAAEoE,QAAQC,qBAAqBC,iBAAmBF,QAAS3D,SAAYC,KAAKG,IAAI0D,mBAAmB7D,KAAKsD,YAAa,CACtIQ,iBAAkB,CAChB5D,OAAO6D,EAAAA,EAAAA,IAAEzE,EAAEY,OACXwD,QAASrE,KAGb,OAAO2E,EAAAA,EAAAA,IAAEhE,KAAKE,MAAOH,EACvB,CACAe,uBAAuBxB,GACrB,IAAID,EAAI,IAAIF,EAAAA,GAAEG,GACE,YAAhBD,EAAE4E,YAA4B5E,EAAI6E,EAAAA,EAAAA,cAAgB7E,IAClD,MAAMU,QAAUC,KAAKG,IAAI0D,mBAAmBxE,EAAE8E,WAAY,CACxDC,mBAAoB,CAAC,IACnBtE,GAAIuE,EAAAA,EAAAA,IAAEtE,EAAEuE,aAAcjE,EAAIsB,EAAAA,EAAAA,OAAS5B,EAAEwE,eACzC,MAAO,CACLrE,MAAOJ,EACP4D,QAAS,IAAIc,EAAAA,GAAE,IAAIC,WAAWpE,IAElC,CACAS,+BAA+BxB,GAC7B,OAAO,IAAIH,EAAAA,GAAEG,GAAGqE,oBAClB,CACA7C,4BAA4BxB,EAAGD,GAC7B,OAAO,IAAIF,EAAAA,GAAEE,GAAGqF,UAClB,CACA5D,0BAA0BxB,GACxB,MAAMD,EAAIsC,EAAAA,EAAAA,QAASgD,EAAAA,EAAAA,IAAErF,IACrB,aAAcU,KAAKG,IAAI0D,mBAAmB7D,KAAKsD,YAAa,CAC1DsB,gBAAiB,CAAEC,IAAKxF,MACtByF,WACN,CACAhE,wBAAyBxB,EAAGD,GAC1B,IAAKA,EACH,MAAM,IAAIkB,MAAM,wCAClB,MAAMR,EAAI,IAAIZ,EAAAA,GAAEG,GAAG6E,WAAYrE,EAAI,IAAIX,EAAAA,GAAEE,GAAG8E,WAAmB5E,GAAIsB,EAAAA,EAAAA,GAAEvB,GAAK,CACxEyF,aAAc,CACZC,MAAO/B,EAAAA,EAAAA,eAAiBjD,KAAKC,QAASD,KAAKE,SAE3C,CACF+E,MAAO,CAAEC,cAAenF,UAEpBC,KAAKmF,iBAAiB,CAC1BC,KAAM,EACJhE,EAAAA,EAAAA,GAAEtB,EAAGE,KAAKsD,YAAa,CACrB+B,kBAAmB,CAAEC,WAAY/F,EAAGqD,MAVkB,MAa1D2C,KAAKxD,EAAAA,EAAAA,GAAE/B,KAAKC,QAASD,KAAKE,OAC1BsF,KAAM,iCACL,gCACL,CACA1E,wBAAyBxB,EAAGD,GAC1B,IAAKA,EACH,MAAM,IAAIkB,MAAM,wCAClB,MAAMR,EAAI,IAAIZ,EAAAA,GAAEE,GAAG8E,iBACbnE,KAAKmF,iBAAiB,CAC1BC,KAAM,EACJhE,EAAAA,EAAAA,GAAErB,EAAGC,KAAKsD,YAAa,CACrBmC,WAAY,CAAEC,MAAMf,EAAAA,EAAAA,IAAErF,OAG1BiG,KAAKxD,EAAAA,EAAAA,GAAE/B,KAAKC,QAASD,KAAKE,OAC1BsF,KAAM,iCACL,gCACL,CACA1E,eAAgBxB,EAAGD,EAAGU,EAAGD,EAAGO,GAC1B,MAAMd,EAAIoG,KAAKC,MAAsB,IAAhBD,KAAKE,UAA0BC,GAAI/B,EAAAA,EAAAA,IAAE1E,EAAEa,OAAQ6F,EAAIpE,EAAAA,EAAAA,OAAStC,EAAEqE,QAAQC,qBAAqBC,gBAAiBoC,EAAI/C,EAAAA,EAAAA,eAAiBjD,KAAKC,QAASD,KAAKE,OAAQ+F,GAAIpF,EAAAA,EAAAA,GAAEd,GACvL,IAAIX,EAAI6G,EAAID,EAAIjG,EAAEoE,WAClB/E,EAAE8G,WAAW,aAAe9G,EAAI8E,EAAAA,EAAAA,cAAgB,IAAI/E,EAAAA,GAAEC,IAAI+E,YAC1D,MAAMjC,EAAI,IAAI/C,EAAAA,GAAEG,GAAG6E,WAAYgC,EAAKnH,IAClC,MAAMoH,EAAI,CACRC,MAAO,CACLC,OAAQxG,EAAEqE,WACVoC,KAAMvH,GAERwH,gBAAiBV,EACjBW,UAAWV,EACXR,IAX2C,IAY3C3C,MAAOrD,GAET,OAAOc,EAAI,CACTqG,+BAAgC,IAAKN,EAAGtD,QAASnB,EAAAA,EAAAA,OAAStB,KACxD,CACFsG,kBAAmBP,EACpB,EAEH,GAAIH,EAAG,CACL,MAAMjH,EAAI,EACRoC,EAAAA,EAAAA,GAAEc,EAAGlC,KAAKsD,YAAa,CAAEsD,eAAgB,CAAC,GAAK,CAC7C,CAAEN,OAAQxG,EAAEqE,WAAYa,MAAO5F,MAEjCgC,EAAAA,EAAAA,GAAEc,EAAGlC,KAAKsD,YAAa6C,EAAE,CACvBpB,aAAc,CAAEC,MAAO5F,aAGrBY,KAAKmF,iBAAiB,CAC1BC,KAAMpG,EACNuG,KAAKxD,EAAAA,EAAAA,GAAE/B,KAAKC,QAASD,KAAKE,OAC1BsF,KAAM,uCACL,6BACL,KAAO,CACL,MAAMxG,EAAI,EACRoC,EAAAA,EAAAA,GAAEc,EAAG9C,EAAG,CACNyH,mBAAoB,CAClBC,QAAS9G,KAAKsD,YACdgD,OAAQxG,EAAEqE,WACV4C,QAAS,CAAEC,MAAO,CAAC,OAGvB5F,EAAAA,EAAAA,GAAEc,EAAGlC,KAAKsD,YAAa6C,EAAE,CACvBlB,MAAO,CAAEC,cAAe9F,KACtB,CAAC,CAAEkH,OAAQxG,EAAEqE,WAAYa,MAAO5F,YAEhCY,KAAKmF,iBAAiB,CAC1BC,KAAMpG,EACNuG,KAAKxD,EAAAA,EAAAA,GAAE/B,KAAKC,QAASD,KAAKE,OAC1BsF,KAAM,gCACL,uBACL,CACF,CACOyB,OAAO3H,EAAGD,GAAC,QAAA6H,EAAA,KAAQ,yBACxB,MAAMpH,EAAI6B,EAAAA,EAAAA,QAASgD,EAAAA,EAAAA,IAAEtF,IAAKgB,EAAI,IAAIlB,EAAAA,GAAEG,GAAG6E,WAAYjB,EAAIgE,EAAK3D,YAAc,IAAIpE,EAAAA,GAAE+H,EAAK3D,YAAYI,qBAAqBwD,OAAO9H,EAAEyD,QAAQsE,GAAG1D,UAAWtC,EAAAA,EAAAA,GAAEf,EAAG6G,EAAK3D,WAAY,CACzK8D,8BAA+B,CAC7BxC,IAAK/E,MAEJsB,EAAAA,EAAAA,GAAEf,EAAG6G,EAAK5D,YAAa,CAC1BmC,WAAY,CAAEC,KAAM5F,WAEhBoH,EAAK/B,iBAAiB,CAC1BC,KAAM,CAAClC,GACPqC,KAAKxD,EAAAA,EAAAA,GAAEmF,EAAKjH,QAASiH,EAAKhH,OAC1BsF,KAAM,gCACL,qBACL,CAb0B,EAazB,OAAAnG,GAAA,OAAAiI,QAAAC,OAAAlI,EAAA,EACDyB,8BAA8BxB,GAC5B,MAAM,IAAIiB,MAAM,kBAClB,CACAO,yBACE,OAAOkD,EAAAA,EAAAA,IAAEhE,KAAKE,MAAO+C,EAAAA,EAAAA,eAAiBjD,KAAKC,QAASD,KAAKE,OAC3D,CACAiF,iBAAiB7F,EAAGD,GAAW,IAARU,EAACyH,UAAAhG,OAAA,QAAAiG,IAAAD,UAAA,IAAAA,UAAA,GACtB,OAAO,IAAIE,EAAAA,EAAEpI,EAAGU,KAAKC,QAASD,KAAKE,MAAOb,EAAGU,EAC/C,GAEF4H,EAAAA,EAAAA,IAAEC,EAAAA,GAAG,cAAevE,E,0EC/LhBjC,EAAInC,OAAOC,eAEXY,EAAIA,CAACT,EAAGF,EAAGG,IADPM,EAACP,EAAGF,EAAGG,IAAMH,KAAKE,EAAI+B,EAAE/B,EAAGF,EAAG,CAAEK,YAAY,EAAIC,cAAc,EAAIC,UAAU,EAAIC,MAAOL,IAAOD,EAAEF,GAAKG,EACxFM,CAAEP,EAAe,iBAALF,EAAgBA,EAAI,GAAKA,EAAGG,GAG7D,SAAS6C,EAAE9C,EAAGF,GACZ,IAAIG,EAAIqC,EAAAA,GAAAA,IAAMtC,EAAGF,GACjB,OAAOG,IAAMA,EAAI,OAAQ4C,EAAAA,EAAAA,aAAmB,IAAJgB,EAAAA,GAAS,GAAG5D,IAAIN,EAAAA,EAAAA,eAAiBK,EAAGF,KAC9E,CACA,SAASiH,EAAE/G,EAAGF,EAAGG,EAAGS,GAClB,MAAO,CACL8H,QAAS9F,EAAAA,GACTpC,MAAOkB,EAAAA,EAAAA,mBAAAA,YAAiC,CACtCuB,OAAQ/C,EACRyI,SAAU3I,EACV4I,IAAK9E,EAAAA,GAAAA,OAAS+E,KAAKC,UAAU3I,IAC7B4I,MAAOnI,IAGb,CACA,MAAMoI,EACJtI,YAAYV,EAAGG,EAAGS,EAAGX,GAAW,IAARiB,EAACmH,UAAAhG,OAAA,QAAAiG,IAAAD,UAAA,IAAAA,UAAA,GACvB1H,EAAEE,KAAM,eACRF,EAAEE,KAAM,WACRF,EAAEE,KAAM,SACRF,EAAEE,KAAM,eACRF,EAAEE,KAAM,kBACRA,KAAKoI,YAAcjJ,EAAGa,KAAKC,QAAUX,EAAGU,KAAKE,MAAQH,EAAGC,KAAKqI,YAAcjJ,EAAGY,KAAKsI,eAAiBjI,CACtG,E","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-BLx-SiXw.mjs","../node_modules/@wormhole-foundation/wormhole-connect/lib/index-DbHp9eCe.mjs","../node_modules/@wormhole-foundation/wormhole-connect/lib/unsignedTransaction-klyxzttV.mjs"],"sourcesContent":["var m = Object.defineProperty;\nvar w = (i, e, t) => e in i ? m(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;\nvar a = (i, e, t) => w(i, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { C as u } from \"./cosmwasm-OHcxD9uL.mjs\";\nimport { cM as g, ca as l, u as h, bS as p, a9 as f } from \"./index-OfNVdS9m.mjs\";\nclass c {\n  constructor(e, t, s, r) {\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"rpc\");\n    a(this, \"contracts\");\n    a(this, \"coreAddress\");\n    this.network = e, this.chain = t, this.rpc = s, this.contracts = r;\n    const n = this.contracts.coreBridge;\n    if (!n)\n      throw new Error(`Wormhole Token Bridge contract for domain ${t} not found`);\n    this.coreAddress = n;\n  }\n  getGuardianSet(e) {\n    throw new Error(\"Method not implemented.\");\n  }\n  getGuardianSetIndex() {\n    throw new Error(\"Method not implemented.\");\n  }\n  getMessageFee() {\n    throw new Error(\"Method not implemented.\");\n  }\n  static async fromRpc(e, t) {\n    const [s, r] = await u.chainFromRpc(e), n = t[r];\n    if (n.network !== s)\n      throw new Error(`Network mismatch: ${n.network} != ${s}`);\n    return new c(s, r, e, n.contracts);\n  }\n  async *publishMessage(e, t, s, r) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async *verifyMessage(e, t) {\n    throw new Error(\"Not implemented.\");\n  }\n  async parseTransaction(e) {\n    const t = await this.rpc.getTx(e);\n    if (!t)\n      throw new Error(\"No transaction found for txid: \" + e);\n    return [c.parseWormholeMessageId(this.chain, this.coreAddress, t)];\n  }\n  async parseMessages(e) {\n    const t = await this.rpc.getTx(e);\n    if (!t)\n      throw new Error(\"No transaction found for txid: \" + e);\n    return [c.parseWormholeMessage(this.chain, this.coreAddress, t)];\n  }\n  static parseWormholeMessage(e, t, s) {\n    const r = s.events.filter((o) => o.type === \"wasm\" && o.attributes[0].key === \"_contract_address\" && o.attributes[0].value === t);\n    if (r.length === 0)\n      throw new Error(\"No wormhole message found in tx\");\n    r.length > 1 && console.error(`Expected single message, found ${r.length}`);\n    const [n] = r, d = Object.fromEntries(n.attributes.map((o) => [o.key.split(\".\")[1], o.value]));\n    return g(\"Uint8Array\", {\n      emitterChain: e,\n      emitterAddress: new l(h.decode(d.sender)),\n      sequence: BigInt(d.sequence),\n      guardianSet: 0,\n      // TODO: need to implement guardian set idx\n      timestamp: Number(d.block_time),\n      consistencyLevel: 0,\n      nonce: Number(d.nonce),\n      signatures: [],\n      payload: h.decode(d.message)\n    });\n  }\n  static parseWormholeMessageId(e, t, s) {\n    const r = c.parseWormholeMessage(e, t, s);\n    return {\n      chain: r.emitterChain,\n      emitter: r.emitterAddress,\n      sequence: r.sequence\n    };\n  }\n}\np(f, \"WormholeCore\", c);\nexport {\n  c as CosmwasmWormholeCore\n};\n","var b = Object.defineProperty;\nvar W = (h, t, e) => t in h ? b(h, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : h[t] = e;\nvar c = (h, t, e) => W(h, typeof t != \"symbol\" ? t + \"\" : t, e);\nimport \"./index-BLx-SiXw.mjs\";\nimport { C as p, G as v } from \"./cosmwasm-OHcxD9uL.mjs\";\nimport { b as o, c as g, C as x } from \"./unsignedTransaction-klyxzttV.mjs\";\nimport { p as u, N as d, a8 as B, cf as S, a3 as a, c9 as E, ca as q, bN as y, bS as I, a9 as D } from \"./index-OfNVdS9m.mjs\";\nclass k {\n  constructor(t, e, r, s) {\n    c(this, \"network\");\n    c(this, \"chain\");\n    c(this, \"rpc\");\n    c(this, \"contracts\");\n    c(this, \"tokenBridge\");\n    c(this, \"translator\");\n    this.network = t, this.chain = e, this.rpc = r, this.contracts = s;\n    const n = this.contracts.tokenBridge;\n    if (!n)\n      throw new Error(`Wormhole Token Bridge contract for domain ${e} not found`);\n    if (this.tokenBridge = n, this.translator = this.contracts.translator, this.translator !== void 0 && this.translator === \"\")\n      throw new Error(\"Translator address may be undefined but not empty string\");\n  }\n  static async fromRpc(t, e) {\n    const [r, s] = await p.chainFromRpc(t), n = e[s];\n    if (n.network !== r)\n      throw new Error(`Network mismatch: ${n.network} != ${r}`);\n    return new k(r, s, t, e[s].contracts);\n  }\n  async isWrappedAsset(t) {\n    try {\n      return await this.getOriginalAsset(t), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async hasWrappedAsset(t) {\n    try {\n      return await this.getWrappedAsset(t), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async getWrappedAsset(t) {\n    if (t.chain === this.chain)\n      throw new Error(`Expected foreign chain, got ${t.chain}`);\n    if (u(t.address))\n      throw new Error(\"Native asset cannot be a wrapped asset\");\n    const e = d.encode(t.address.toUniversalAddress().toUint8Array()), { address: r } = await this.rpc.queryContractSmart(this.tokenBridge, {\n      wrapped_registry: {\n        chain: B(t.chain),\n        address: e\n      }\n    });\n    return S(this.chain, r);\n  }\n  async getOriginalAsset(t) {\n    let e = new a(t);\n    e.denomType === \"factory\" && (e = v.factoryToCw20(e));\n    const r = await this.rpc.queryContractSmart(e.toString(), {\n      wrapped_asset_info: {}\n    }), s = E(r.asset_chain), n = d.decode(r.asset_address);\n    return {\n      chain: s,\n      address: new q(new Uint8Array(n))\n    };\n  }\n  async getTokenUniversalAddress(t) {\n    return new a(t).toUniversalAddress();\n  }\n  async getTokenNativeAddress(t, e) {\n    return new a(e).toNative();\n  }\n  async isTransferCompleted(t) {\n    const e = d.encode(y(t));\n    return (await this.rpc.queryContractSmart(this.tokenBridge, {\n      is_vaa_redeemed: { vaa: e }\n    })).is_redeemed;\n  }\n  async *createAttestation(t, e) {\n    if (!e)\n      throw new Error(\"Payer required to create attestation\");\n    const r = new a(t).toString(), s = new a(e).toString(), n = 0, w = u(t) ? {\n      native_token: {\n        denom: p.getNativeDenom(this.network, this.chain)\n      }\n    } : {\n      token: { contract_addr: r }\n    };\n    yield this.createUnsignedTx({\n      msgs: [\n        o(s, this.tokenBridge, {\n          create_asset_meta: { asset_info: w, nonce: n }\n        })\n      ],\n      fee: g(this.network, this.chain),\n      memo: \"Wormhole - Create Attestation\"\n    }, \"TokenBridge.createAttestation\");\n  }\n  async *submitAttestation(t, e) {\n    if (!e)\n      throw new Error(\"Payer required to submit attestation\");\n    const r = new a(e).toString();\n    yield this.createUnsignedTx({\n      msgs: [\n        o(r, this.tokenBridge, {\n          submit_vaa: { data: y(t) }\n        })\n      ],\n      fee: g(this.network, this.chain),\n      memo: \"Wormhole - Submit Attestation\"\n    }, \"TokenBridge.submitAttestation\");\n  }\n  async *transfer(t, e, r, s, n) {\n    const w = Math.round(Math.random() * 1e5), f = \"0\", C = B(e.chain), N = d.encode(e.address.toUniversalAddress().toUint8Array()), U = p.getNativeDenom(this.network, this.chain), A = u(r);\n    let i = A ? U : r.toString();\n    i.startsWith(\"factory\") && (i = v.factoryToCw20(new a(i)).toString());\n    const l = new a(t).toString(), _ = (m) => {\n      const T = {\n        asset: {\n          amount: s.toString(),\n          info: m\n        },\n        recipient_chain: C,\n        recipient: N,\n        fee: f,\n        nonce: w\n      };\n      return n ? {\n        initiate_transfer_with_payload: { ...T, payload: d.encode(n) }\n      } : {\n        initiate_transfer: T\n      };\n    };\n    if (A) {\n      const m = [\n        o(l, this.tokenBridge, { deposit_tokens: {} }, [\n          { amount: s.toString(), denom: i }\n        ]),\n        o(l, this.tokenBridge, _({\n          native_token: { denom: i }\n        }))\n      ];\n      yield this.createUnsignedTx({\n        msgs: m,\n        fee: g(this.network, this.chain),\n        memo: \"Wormhole - Initiate Native Transfer\"\n      }, \"TokenBridge.transferNative\");\n    } else {\n      const m = [\n        o(l, i, {\n          increase_allowance: {\n            spender: this.tokenBridge,\n            amount: s.toString(),\n            expires: { never: {} }\n          }\n        }),\n        o(l, this.tokenBridge, _({\n          token: { contract_addr: i }\n        }), [{ amount: s.toString(), denom: i }])\n      ];\n      yield this.createUnsignedTx({\n        msgs: m,\n        fee: g(this.network, this.chain),\n        memo: \"Wormhole - Initiate Transfer\"\n      }, \"TokenBridge.transfer\");\n    }\n  }\n  async *redeem(t, e, r = !0) {\n    const s = d.encode(y(e)), n = new a(t).toString(), f = this.translator && new a(this.translator).toUniversalAddress().equals(e.payload.to.address) ? o(n, this.translator, {\n      complete_transfer_and_convert: {\n        vaa: s\n      }\n    }) : o(n, this.tokenBridge, {\n      submit_vaa: { data: s }\n    });\n    yield this.createUnsignedTx({\n      msgs: [f],\n      fee: g(this.network, this.chain),\n      memo: \"Wormhole - Complete Transfer\"\n    }, \"TokenBridge.redeem\");\n  }\n  async parseTransactionDetails(t) {\n    throw new Error(\"Not implemented\");\n  }\n  async getWrappedNative() {\n    return S(this.chain, p.getNativeDenom(this.network, this.chain));\n  }\n  createUnsignedTx(t, e, r = !1) {\n    return new x(t, this.network, this.chain, e, r);\n  }\n}\nI(D, \"TokenBridge\", k);\nexport {\n  k as CosmwasmTokenBridge\n};\n","var o = Object.defineProperty;\nvar c = (e, a, t) => a in e ? o(e, a, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[a] = t;\nvar s = (e, a, t) => c(e, typeof a != \"symbol\" ? a + \"\" : a, t);\nimport { O as l, C as m, P as u } from \"./cosmwasm-OHcxD9uL.mjs\";\nimport { d7 as d, d8 as f, d9 as g, a5 as p } from \"./index-OfNVdS9m.mjs\";\nfunction h(e, a) {\n  let t = d.get(e, a);\n  return t || (t = \"0.1\"), l.calculateFee(f * 1.5, `${t}${m.getNativeDenom(e, a)}`);\n}\nfunction T(e, a, t, r) {\n  return {\n    typeUrl: g,\n    value: u.MsgExecuteContract.fromPartial({\n      sender: e,\n      contract: a,\n      msg: p.encode(JSON.stringify(t)),\n      funds: r\n    })\n  };\n}\nclass F {\n  constructor(a, t, r, i, n = !1) {\n    s(this, \"transaction\");\n    s(this, \"network\");\n    s(this, \"chain\");\n    s(this, \"description\");\n    s(this, \"parallelizable\");\n    this.transaction = a, this.network = t, this.chain = r, this.description = i, this.parallelizable = n;\n  }\n}\nexport {\n  F as C,\n  T as b,\n  h as c\n};\n"],"names":["m","Object","defineProperty","a","i","e","t","w","enumerable","configurable","writable","value","c","constructor","s","r","this","network","chain","rpc","contracts","n","coreBridge","Error","coreAddress","getGuardianSet","getGuardianSetIndex","getMessageFee","static","u","async","getTx","parseWormholeMessageId","parseWormholeMessage","events","filter","o","type","attributes","key","length","console","error","d","fromEntries","map","split","g","emitterChain","emitterAddress","l","h","sender","sequence","BigInt","guardianSet","timestamp","Number","block_time","consistencyLevel","nonce","signatures","payload","message","emitter","p","f","b","W","k","tokenBridge","translator","getOriginalAsset","getWrappedAsset","address","toUniversalAddress","toUint8Array","queryContractSmart","wrapped_registry","B","S","denomType","v","toString","wrapped_asset_info","E","asset_chain","asset_address","q","Uint8Array","toNative","y","is_vaa_redeemed","vaa","is_redeemed","native_token","denom","token","contract_addr","createUnsignedTx","msgs","create_asset_meta","asset_info","fee","memo","submit_vaa","data","Math","round","random","C","N","U","A","startsWith","_","T","asset","amount","info","recipient_chain","recipient","initiate_transfer_with_payload","initiate_transfer","deposit_tokens","increase_allowance","spender","expires","never","redeem","_this","equals","to","complete_transfer_and_convert","Promise","reject","arguments","undefined","x","I","D","typeUrl","contract","msg","JSON","stringify","funds","F","transaction","description","parallelizable"],"sourceRoot":""}