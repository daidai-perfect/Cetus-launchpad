{"version":3,"file":"static/js/921.c00e3acd.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-C61jUsbI.mjs"],"sourcesContent":["var S = Object.defineProperty;\nvar v = (i, e, t) => e in i ? S(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;\nvar a = (i, e, t) => v(i, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { cN as f, cO as I, a5 as x, r as p, cP as b, a8 as w, c8 as U, c9 as E, ca as m, u as o, cQ as k, s as c, p as h, cR as F, cf as _, Z as $, cc as C, m as T, bN as l, cS as N, bS as O } from \"./index-OfNVdS9m.mjs\";\nimport { A as Q } from \"./aptos-BIjJ-z5H.mjs\";\nclass R {\n  constructor(e, t, s, r, n = !1) {\n    a(this, \"transaction\");\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"description\");\n    a(this, \"parallelizable\");\n    this.transaction = e, this.network = t, this.chain = s, this.description = r, this.parallelizable = n;\n  }\n}\nconst W = [\n  { name: \"tokenBridgeAddress\", ...f },\n  { name: \"chain\", ...I() },\n  {\n    name: \"domainSeparator\",\n    binary: \"bytes\",\n    custom: x.encode(p),\n    omit: !0\n  },\n  { name: \"tokenId\", ...f },\n  // from https://github.com/aptos-labs/aptos-core/blob/25696fd266498d81d346fe86e01c330705a71465/aptos-move/framework/aptos-framework/sources/account.move#L90-L95\n  { name: \"domainSeparator\", binary: \"bytes\", custom: new Uint8Array([255]), omit: !0 }\n], P = (i) => b(W, i);\nclass d {\n  constructor(e, t, s, r) {\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"connection\");\n    a(this, \"contracts\");\n    a(this, \"chainId\");\n    a(this, \"tokenBridgeAddress\");\n    this.network = e, this.chain = t, this.connection = s, this.contracts = r, this.chainId = w(t);\n    const n = r.tokenBridge;\n    if (!n)\n      throw new Error(`TokenBridge contract Address for chain ${t} not found`);\n    this.tokenBridgeAddress = n;\n  }\n  static async fromRpc(e, t) {\n    const [s, r] = await Q.chainFromRpc(e), n = t[r];\n    if (n.network !== s)\n      throw new Error(\"Network mismatch \" + n.network + \" !== \" + s);\n    return new d(s, r, e, n.contracts);\n  }\n  async isWrappedAsset(e) {\n    try {\n      return await this.getOriginalAsset(e), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getOriginalAsset(e) {\n    const t = e.toString().split(p);\n    let s;\n    if (s = (await this.connection.getAccountResource(t[0], `${this.tokenBridgeAddress}::state::OriginInfo`)).data, !s)\n      throw U;\n    const r = E(parseInt(s.token_chain.number)), n = new m(s.token_address.external_address);\n    return { chain: r, address: n };\n  }\n  async getTokenUniversalAddress(e) {\n    return new m(o.encode(k(e.toString()), !0));\n  }\n  async getTokenNativeAddress(e, t) {\n    const s = e === this.chain ? await this.getTypeFromExternalAddress(t.toString()) : await this.getAssetFullyQualifiedType({ chain: e, address: t });\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    return new c(s);\n  }\n  async hasWrappedAsset(e) {\n    try {\n      return await this.getWrappedAsset(e), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async getWrappedAsset(e) {\n    if (h(e.address))\n      throw new Error(\"native asset cannot be a wrapped asset\");\n    const t = await this.getAssetFullyQualifiedType(e);\n    if (!t)\n      throw new Error(\"Invalid asset address.\");\n    return await this.connection.getAccountResource(F(t), `${this.tokenBridgeAddress}::state::OriginInfo`), _(this.chain, t);\n  }\n  async isTransferCompleted(e) {\n    const s = (await this.connection.getAccountResource(this.tokenBridgeAddress, `${this.tokenBridgeAddress}::state::State`)).data.consumed_vaas.elems.handle;\n    try {\n      return await this.connection.getTableItem(s, {\n        key_type: \"vector<u8>\",\n        value_type: \"u8\",\n        key: `0x${$.Buffer.from(C(e.hash)).toString(\"hex\")}`\n      }), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getWrappedNative() {\n    return _(this.chain, T);\n  }\n  async *createAttestation(e, t) {\n    const s = { chain: this.chain, address: new c(e) }, r = await this.getAssetFullyQualifiedType(s);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::attest_token::attest_token_entry`,\n      type_arguments: [r],\n      arguments: []\n    }, \"Aptos.AttestToken\");\n  }\n  async *submitAttestation(e, t) {\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,\n      type_arguments: [],\n      arguments: [l(e)]\n    }, \"Aptos.CreateWrappedCoinType\");\n    const s = await this.getAssetFullyQualifiedType(e.payload.token);\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,\n      type_arguments: [s],\n      arguments: [l(e)]\n    }, \"Aptos.CreateWrappedCoin\");\n  }\n  async *transfer(e, t, s, r, n) {\n    const B = 0n, u = 0n, y = h(s) ? T : s.toString(), g = t.address.toUniversalAddress().toUint8Array(), A = w(t.chain);\n    n ? yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,\n      type_arguments: [y],\n      arguments: [r, A, g, u, n]\n    }, \"Aptos.TransferTokensWithPayload\") : yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,\n      type_arguments: [y],\n      arguments: [r, A, g, B, u]\n    }, \"Aptos.TransferTokens\");\n  }\n  async *redeem(e, t, s = !0) {\n    const r = t.payload.token.chain === this.chain ? await this.getTypeFromExternalAddress(t.payload.token.address.toString()) : await this.getAssetFullyQualifiedType(t.payload.token);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,\n      type_arguments: [r],\n      arguments: [l(t)]\n    }, \"Aptos.CompleteTransfer\");\n  }\n  async getAssetFullyQualifiedType(e) {\n    return e.chain === this.chain ? N(e.address.toString()) ? e.address.toString() : null : `${d.getForeignAssetAddress(this.chain, this.tokenBridgeAddress, e)}::coin::T`;\n  }\n  /**\n   * Given a hash, returns the fully qualified type by querying the corresponding TypeInfo.\n   * @param address Hash of fully qualified type\n   * @returns The fully qualified type associated with the given hash\n   */\n  async getTypeFromExternalAddress(e) {\n    try {\n      const t = (await this.connection.getAccountResource(this.tokenBridgeAddress, `${this.tokenBridgeAddress}::state::State`)).data, { handle: s } = t.native_infos, r = await this.connection.getTableItem(s, {\n        key_type: `${this.tokenBridgeAddress}::token_hash::TokenHash`,\n        value_type: \"0x1::type_info::TypeInfo\",\n        key: { hash: e }\n      });\n      return r ? [\n        r.account_address,\n        String.fromCharCode(...o.decode(r.module_name)),\n        String.fromCharCode(...o.decode(r.struct_name))\n      ].join(p) : null;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Derive the module address for an asset defined by the given origin chain and address.\n   * @param tokenBridgeAddress Address of token bridge (32 bytes)\n   * @param originChain Chain ID of chain that original asset is from\n   * @param originAddress Native address of asset\n   * @returns The module address for the given asset\n   */\n  static getForeignAssetAddress(e, t, s) {\n    if (h(s.address))\n      throw new Error(\"Invalid token address\");\n    const r = P({\n      chain: s.chain,\n      tokenBridgeAddress: new c(t).toUniversalAddress(),\n      tokenId: s.address.toUniversalAddress()\n    });\n    return o.encode(k(r), !0);\n  }\n  createUnsignedTx(e, t, s = !1) {\n    return new R(e, this.network, this.chain, t, s);\n  }\n}\nO(\"Aptos\", \"TokenBridge\", d);\nexport {\n  d as AptosTokenBridge\n};\n"],"names":["S","Object","defineProperty","a","i","e","t","v","enumerable","configurable","writable","value","R","constructor","s","r","n","arguments","length","undefined","this","transaction","network","chain","description","parallelizable","W","name","f","I","binary","custom","x","p","omit","Uint8Array","d","connection","contracts","chainId","w","tokenBridge","Error","tokenBridgeAddress","static","Q","async","getOriginalAsset","toString","split","getAccountResource","data","U","E","parseInt","token_chain","number","address","m","token_address","external_address","o","k","getTypeFromExternalAddress","getAssetFullyQualifiedType","c","getWrappedAsset","h","F","_","consumed_vaas","elems","handle","getTableItem","key_type","value_type","key","$","C","hash","T","createUnsignedTx","function","type_arguments","l","payload","token","u","y","g","toUniversalAddress","toUint8Array","A","redeem","_this","Promise","reject","N","getForeignAssetAddress","native_infos","account_address","String","fromCharCode","module_name","struct_name","join","tokenId","b","O"],"sourceRoot":""}