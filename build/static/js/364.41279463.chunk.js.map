{"version":3,"file":"static/js/364.41279463.chunk.js","mappings":"iLAAIA,EAAIC,OAAOC,eAEXC,EAAIA,CAACC,EAAGC,EAAGC,IADPC,EAACH,EAAGC,EAAGC,IAAMD,KAAKD,EAAIJ,EAAEI,EAAGC,EAAG,CAAEG,YAAY,EAAIC,cAAc,EAAIC,UAAU,EAAIC,MAAOL,IAAOF,EAAEC,GAAKC,EACxFC,CAAEH,EAAe,iBAALC,EAAgBA,EAAI,GAAKA,EAAGC,GAG7D,MAAMM,EACJC,YAAYR,EAAGC,EAAGQ,EAAGC,GACnBZ,EAAEa,KAAM,WACRb,EAAEa,KAAM,SACRb,EAAEa,KAAM,YACRb,EAAEa,KAAM,aACRb,EAAEa,KAAM,WACRb,EAAEa,KAAM,uBACRA,KAAKC,QAAUZ,EAAGW,KAAKE,MAAQZ,EAAGU,KAAKG,SAAWL,EAAGE,KAAKI,UAAYL,EAAGC,KAAKK,SAAUC,EAAAA,EAAAA,IAAEhB,GAC1F,MAAMiB,EAAIR,EAAES,WACZ,IAAKD,EACH,MAAM,IAAIE,MAAM,yCAAyCnB,eAC3DU,KAAKU,oBAAsBH,CAC7B,CACAI,eAAetB,GACb,MAAM,IAAIoB,MAAM,0BAClB,CACAG,gBACE,MAAM,IAAIH,MAAM,0BAClB,CACAI,qBAAqBxB,EAAGC,GACtB,MAAOQ,EAAGC,SAAWe,EAAAA,EAAAA,aAAezB,GAAIkB,EAAIjB,EAAES,GAC9C,GAAIQ,EAAEN,UAAYH,EAChB,MAAM,IAAIW,MAAM,qBAAqBF,EAAEN,eAAeH,KACxD,OAAO,IAAIF,EAAEE,EAAGC,EAAGV,EAAGkB,EAAEH,UAC1B,CACAW,oBAAqB1B,EAAGC,GACtB,MAAM,IAAImB,MAAM,0BAClB,CACAM,qBAAsB1B,EAAGC,GACvB,MAAM,IAAImB,MAAM,0BAClB,CACAM,uBAAuB1B,GACrB,aAAcW,KAAKgB,cAAc3B,IAAI4B,KAAKnB,IAAC,CACzCoB,QAASpB,EAAEqB,eACXC,SAAUtB,EAAEsB,SACZlB,MAAOF,KAAKE,SAEhB,CACAa,4BACE,MAAM,IAAIN,MAAM,0BAClB,CACAM,oBAAoB1B,GAClB,IAAIU,EACJ,MAAMD,EAGS,OAHJC,SAAWC,KAAKG,SAASkB,oBAAoB,CACtDC,OAAQjC,EACRkC,QAAS,CAAEC,YAAY,EAAIC,aAAa,EAAIC,WAAW,MACrDC,aAAkB,EAAS5B,EAAE6B,QAAQrB,GAAMA,EAAEsB,KAAKC,SAAS,qBAC/D,IAAKhC,GAAiB,GAAZA,EAAEiC,OACV,MAAM,IAAItB,MAAM,6BAClB,OAAOX,EAAEmB,KAAKV,IACZ,MAAMyB,EAAIzB,EAAE0B,WACZ,OAAOC,EAAAA,EAAAA,IAAE,aAAc,CACrBC,aAAcnC,KAAKE,MACnBiB,eAAgB,IAAIiB,EAAAA,EAAEJ,EAAEK,QAAQC,qBAChClB,SAAUmB,OAAOP,EAAEZ,UACnBoB,YAAa,EAEbC,UAAWC,OAAOV,EAAES,WACpBE,iBAAkBX,EAAEY,kBACpBC,MAAOb,EAAEa,MACTC,WAAY,GACZC,QAAS,IAAIC,WAAWhB,EAAEe,UAC1B,GAEN,GAEFE,EAAAA,EAAAA,IAAE,MAAO,eAAgBrD,E","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-hKoCx6Q-.mjs"],"sourcesContent":["var d = Object.defineProperty;\nvar h = (i, e, r) => e in i ? d(i, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : i[e] = r;\nvar o = (i, e, r) => h(i, typeof e != \"symbol\" ? e + \"\" : e, r);\nimport { a8 as m, cM as w, Q as g, bS as p } from \"./index-OfNVdS9m.mjs\";\nimport { S as u } from \"./sui-BTljusIV.mjs\";\nclass c {\n  constructor(e, r, t, n) {\n    o(this, \"network\");\n    o(this, \"chain\");\n    o(this, \"provider\");\n    o(this, \"contracts\");\n    o(this, \"chainId\");\n    o(this, \"coreBridgePackageId\");\n    this.network = e, this.chain = r, this.provider = t, this.contracts = n, this.chainId = m(r);\n    const s = n.coreBridge;\n    if (!s)\n      throw new Error(`CoreBridge contract Address for chain ${r} not found`);\n    this.coreBridgePackageId = s;\n  }\n  getGuardianSet(e) {\n    throw new Error(\"Method not implemented.\");\n  }\n  getMessageFee() {\n    throw new Error(\"Method not implemented.\");\n  }\n  static async fromRpc(e, r) {\n    const [t, n] = await u.chainFromRpc(e), s = r[n];\n    if (s.network !== t)\n      throw new Error(`Network mismatch: ${s.network} !== ${t}`);\n    return new c(t, n, e, s.contracts);\n  }\n  async *verifyMessage(e, r) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async *publishMessage(e, r) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async parseTransaction(e) {\n    return (await this.parseMessages(e)).map((t) => ({\n      emitter: t.emitterAddress,\n      sequence: t.sequence,\n      chain: this.chain\n    }));\n  }\n  async getGuardianSetIndex() {\n    throw new Error(\"Method not implemented.\");\n  }\n  async parseMessages(e) {\n    var n;\n    const t = (n = (await this.provider.getTransactionBlock({\n      digest: e,\n      options: { showEvents: !0, showEffects: !0, showInput: !0 }\n    })).events) == null ? void 0 : n.filter((s) => s.type.endsWith(\"WormholeMessage\"));\n    if (!t || t.length == 0)\n      throw new Error(\"WormholeMessage not found\");\n    return t.map((s) => {\n      const a = s.parsedJson;\n      return w(\"Uint8Array\", {\n        emitterChain: this.chain,\n        emitterAddress: new g(a.sender).toUniversalAddress(),\n        sequence: BigInt(a.sequence),\n        guardianSet: 0,\n        // TODO: need to implement guardian set idx\n        timestamp: Number(a.timestamp),\n        consistencyLevel: a.consistency_level,\n        nonce: a.nonce,\n        signatures: [],\n        payload: new Uint8Array(a.payload)\n      });\n    });\n  }\n}\np(\"Sui\", \"WormholeCore\", c);\nexport {\n  c as SuiWormholeCore\n};\n"],"names":["d","Object","defineProperty","o","i","e","r","h","enumerable","configurable","writable","value","c","constructor","t","n","this","network","chain","provider","contracts","chainId","m","s","coreBridge","Error","coreBridgePackageId","getGuardianSet","getMessageFee","static","u","async","parseMessages","map","emitter","emitterAddress","sequence","getTransactionBlock","digest","options","showEvents","showEffects","showInput","events","filter","type","endsWith","length","a","parsedJson","w","emitterChain","g","sender","toUniversalAddress","BigInt","guardianSet","timestamp","Number","consistencyLevel","consistency_level","nonce","signatures","payload","Uint8Array","p"],"sourceRoot":""}