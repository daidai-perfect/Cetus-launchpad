{"version":3,"file":"static/js/606.d0acf3f7.chunk.js","mappings":"mLAAIA,EAAIC,OAAOC,eAEXC,EAAIA,CAACC,EAAGC,EAAGC,IADPC,EAACH,EAAGC,EAAGC,IAAMD,KAAKD,EAAIJ,EAAEI,EAAGC,EAAG,CAAEG,YAAY,EAAIC,cAAc,EAAIC,UAAU,EAAIC,MAAOL,IAAOF,EAAEC,GAAKC,EACxFC,CAAEH,EAAe,iBAALC,EAAgBA,EAAI,GAAKA,EAAGC,GAG7D,MAAMM,EACJC,YAAYR,EAAGC,EAAGQ,EAAGC,GACnBZ,EAAEa,KAAM,WACRb,EAAEa,KAAM,SACRb,EAAEa,KAAM,cACRb,EAAEa,KAAM,aACRb,EAAEa,KAAM,WACRb,EAAEa,KAAM,cACRA,KAAKC,QAAUZ,EAAGW,KAAKE,MAAQZ,EAAGU,KAAKG,WAAaL,EAAGE,KAAKI,UAAYL,EAAGC,KAAKK,SAAUC,EAAAA,EAAAA,IAAEhB,GAC5F,MAAMiB,EAAIR,EAAES,WACZ,IAAKD,EACH,MAAM,IAAIE,MAAM,yCAAyCnB,eAC3DU,KAAKQ,WAAaD,CACpB,CACAG,eAAerB,GACb,MAAM,IAAIoB,MAAM,0BAClB,CACAE,sBACE,MAAM,IAAIF,MAAM,0BAClB,CACAG,gBACE,MAAM,IAAIH,MAAM,0BAClB,CACAI,qBAAqBxB,EAAGC,GACtB,MAAOQ,EAAGC,SAAWe,EAAAA,EAAAA,aAAezB,GAAIkB,EAAIjB,EAAES,GAC9C,GAAIQ,EAAEN,UAAYH,EAChB,MAAM,IAAIW,MAAM,qBAAqBF,EAAEN,eAAeH,KACxD,OAAO,IAAIF,EAAEE,EAAGC,EAAGV,EAAGkB,EAAEH,UAC1B,CACAW,qBAAsB1B,EAAGC,GACvB,MAAM,IAAImB,MAAM,0BAClB,CACAM,oBAAqB1B,EAAGC,GACtB,MAAM,IAAImB,MAAM,mBAClB,CACAM,uBAAuB1B,GACrB,aAAcW,KAAKgB,cAAc3B,IAAI4B,KAAKnB,IAAC,CACzCI,MAAOJ,EAAEoB,aACTC,QAASrB,EAAEsB,eACXC,SAAUvB,EAAEuB,YAEhB,CACAN,oBAAoB1B,GAClB,MAAMC,QAAUU,KAAKG,WAAWmB,qBAAqBjC,GACrD,GAAe,qBAAXC,EAAEiC,KACJ,MAAM,IAAId,MAAM,GAAGpB,+BACrB,MAAMU,EAAIT,EAAEkC,OAAOC,QAAQlB,GAAMA,EAAEgB,KAAKG,SAAS,qBACjD,IAAK3B,GAAkB,IAAbA,EAAE4B,OACV,MAAM,IAAIlB,MAAM,iCAAiCpB,KACnD,OAAOU,EAAEkB,KAAKV,IACZ,MAAMqB,EAAIrB,EAAEsB,KAAMC,EAAI,IAAIC,EAAAA,GAAEC,OAAOJ,EAAEK,QAAQC,SAAS,IAAIC,SAAS,GAAI,MACvE,OAAOC,EAAAA,EAAAA,IAAE,aAAc,CACrBC,YAAa,EAEbnB,aAAclB,KAAKE,MACnBkB,eAAgBU,EAChBT,SAAUW,OAAOJ,EAAEP,UACnBiB,UAAWC,OAAOX,EAAEU,WACpBE,iBAAkBZ,EAAEa,kBACpBC,MAAOH,OAAOX,EAAEc,OAChBC,WAAY,GACZC,QAASC,EAAAA,EAAAA,OAASjB,EAAEgB,UACpB,GAEN,GAEFE,EAAAA,EAAAA,IAAE,QAAS,eAAgBlD,E","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-RH1OzbVe.mjs"],"sourcesContent":["var h = Object.defineProperty;\nvar m = (i, e, t) => e in i ? h(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;\nvar o = (i, e, t) => m(i, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { a8 as w, ca as g, cM as p, u, bS as l } from \"./index-OfNVdS9m.mjs\";\nimport { A as f } from \"./aptos-BIjJ-z5H.mjs\";\nclass c {\n  constructor(e, t, r, s) {\n    o(this, \"network\");\n    o(this, \"chain\");\n    o(this, \"connection\");\n    o(this, \"contracts\");\n    o(this, \"chainId\");\n    o(this, \"coreBridge\");\n    this.network = e, this.chain = t, this.connection = r, this.contracts = s, this.chainId = w(t);\n    const n = s.coreBridge;\n    if (!n)\n      throw new Error(`CoreBridge contract Address for chain ${t} not found`);\n    this.coreBridge = n;\n  }\n  getGuardianSet(e) {\n    throw new Error(\"Method not implemented.\");\n  }\n  getGuardianSetIndex() {\n    throw new Error(\"Method not implemented.\");\n  }\n  getMessageFee() {\n    throw new Error(\"Method not implemented.\");\n  }\n  static async fromRpc(e, t) {\n    const [r, s] = await f.chainFromRpc(e), n = t[s];\n    if (n.network !== r)\n      throw new Error(`Network mismatch: ${n.network} !== ${r}`);\n    return new c(r, s, e, n.contracts);\n  }\n  async *publishMessage(e, t) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async *verifyMessage(e, t) {\n    throw new Error(\"Not implemented.\");\n  }\n  async parseTransaction(e) {\n    return (await this.parseMessages(e)).map((r) => ({\n      chain: r.emitterChain,\n      emitter: r.emitterAddress,\n      sequence: r.sequence\n    }));\n  }\n  async parseMessages(e) {\n    const t = await this.connection.getTransactionByHash(e);\n    if (t.type !== \"user_transaction\")\n      throw new Error(`${e} is not a user_transaction`);\n    const s = t.events.filter((n) => n.type.endsWith(\"WormholeMessage\"));\n    if (!s || s.length === 0)\n      throw new Error(`WormholeMessage not found for ${e}`);\n    return s.map((n) => {\n      const a = n.data, d = new g(BigInt(a.sender).toString(16).padStart(64, \"0\"));\n      return p(\"Uint8Array\", {\n        guardianSet: 0,\n        // TODO: need to implement guardian set idx\n        emitterChain: this.chain,\n        emitterAddress: d,\n        sequence: BigInt(a.sequence),\n        timestamp: Number(a.timestamp),\n        consistencyLevel: a.consistency_level,\n        nonce: Number(a.nonce),\n        signatures: [],\n        payload: u.decode(a.payload)\n      });\n    });\n  }\n}\nl(\"Aptos\", \"WormholeCore\", c);\nexport {\n  c as AptosWormholeCore\n};\n"],"names":["h","Object","defineProperty","o","i","e","t","m","enumerable","configurable","writable","value","c","constructor","r","s","this","network","chain","connection","contracts","chainId","w","n","coreBridge","Error","getGuardianSet","getGuardianSetIndex","getMessageFee","static","f","async","parseMessages","map","emitterChain","emitter","emitterAddress","sequence","getTransactionByHash","type","events","filter","endsWith","length","a","data","d","g","BigInt","sender","toString","padStart","p","guardianSet","timestamp","Number","consistencyLevel","consistency_level","nonce","signatures","payload","u","l"],"sourceRoot":""}