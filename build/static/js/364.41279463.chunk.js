"use strict";(self.webpackChunkbrige_typescript=self.webpackChunkbrige_typescript||[]).push([[364],{1364:(e,t,r)=>{r.r(t),r.d(t,{SuiWormholeCore:()=>a});var n=r(7718),s=r(3016),o=Object.defineProperty,i=(e,t,r)=>((e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r);class a{constructor(e,t,r,s){i(this,"network"),i(this,"chain"),i(this,"provider"),i(this,"contracts"),i(this,"chainId"),i(this,"coreBridgePackageId"),this.network=e,this.chain=t,this.provider=r,this.contracts=s,this.chainId=(0,n.a8)(t);const o=s.coreBridge;if(!o)throw new Error(`CoreBridge contract Address for chain ${t} not found`);this.coreBridgePackageId=o}getGuardianSet(e){throw new Error("Method not implemented.")}getMessageFee(){throw new Error("Method not implemented.")}static async fromRpc(e,t){const[r,n]=await s.S.chainFromRpc(e),o=t[n];if(o.network!==r)throw new Error(`Network mismatch: ${o.network} !== ${r}`);return new a(r,n,e,o.contracts)}async*verifyMessage(e,t){throw new Error("Method not implemented.")}async*publishMessage(e,t){throw new Error("Method not implemented.")}async parseTransaction(e){return(await this.parseMessages(e)).map((e=>({emitter:e.emitterAddress,sequence:e.sequence,chain:this.chain})))}async getGuardianSetIndex(){throw new Error("Method not implemented.")}async parseMessages(e){var t;const r=null==(t=(await this.provider.getTransactionBlock({digest:e,options:{showEvents:!0,showEffects:!0,showInput:!0}})).events)?void 0:t.filter((e=>e.type.endsWith("WormholeMessage")));if(!r||0==r.length)throw new Error("WormholeMessage not found");return r.map((e=>{const t=e.parsedJson;return(0,n.cM)("Uint8Array",{emitterChain:this.chain,emitterAddress:new n.Q(t.sender).toUniversalAddress(),sequence:BigInt(t.sequence),guardianSet:0,timestamp:Number(t.timestamp),consistencyLevel:t.consistency_level,nonce:t.nonce,signatures:[],payload:new Uint8Array(t.payload)})}))}}(0,n.bS)("Sui","WormholeCore",a)}}]);
//# sourceMappingURL=364.41279463.chunk.js.map